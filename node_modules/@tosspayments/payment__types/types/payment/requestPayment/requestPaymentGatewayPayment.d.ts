import { PaymentMethodCode, PaymentRequest, PaymentRequestWithoutUrl } from '../PaymentRequest';
import { PaymentSuccessParams } from '../../public-interfaces';
type RouteResponse = {
    result: true;
    sessionCreationApiVersion: string;
} | {
    result: false;
    sessionCreationApiVersion: null;
};
export declare function isPaymentGatewayCompatible({ amount, clientKey, method, isPromise, ...params }: {
    clientKey: string;
    method: PaymentMethodCode;
    isPromise: boolean;
} & (PaymentRequest | PaymentRequestWithoutUrl)): Promise<RouteResponse>;
interface Options {
    sessionCreationApiVersion: string;
    isPromise?: true;
}
export declare function requestPaymentGatewayPayment(clientKey: string, methodCode: PaymentMethodCode, params: PaymentRequest, options: Options): Promise<void>;
export declare namespace requestPaymentGatewayPayment {
    var async: (clientKey: string, methodCode: PaymentMethodCode, params: PaymentRequestWithoutUrl, options: Options) => Promise<PaymentSuccessParams>;
}
export {};
